import os
import re
from flask import Flask, request
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, ChatMemberHandler,
    ContextTypes
)
import asyncio

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Flask
app = Flask(__name__)

# –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.getenv("TOKEN")
PORT = int(os.getenv("PORT", "10000"))
HOSTNAME = os.getenv("RENDER_EXTERNAL_HOSTNAME")

# Telegram Application
telegram_app = Application.builder().token(TOKEN).build()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –ë–æ—Ç –ø—Ä–∞—Ü—é—î!")

telegram_app.add_handler(CommandHandler("start", start))

# –†–µ–≥—É–ª—è—Ä–∫–∞: –∫–∏—Ç–∞–π—Å—å–∫—ñ —Ç–∞ –∞—Ä–∞–±—Å—å–∫—ñ —Å–∏–º–≤–æ–ª–∏
chinese_or_arabic_re = re.compile(r'[\u0600-\u06FF\u0750-\u077F\u4E00-\u9FFF]')

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤
async def handle_new_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_member = update.chat_member
    if chat_member.new_chat_member and chat_member.new_chat_member.user:
        user = chat_member.new_chat_member.user
        name = f"{user.first_name or ''} {user.last_name or ''}".strip()
        if chinese_or_arabic_re.search(name):
            try:
                await context.bot.ban_chat_member(chat_member.chat.id, user.id)
                await context.bot.unban_chat_member(chat_member.chat.id, user.id)  # kick
                print(f"üö´ –í–∏–¥–∞–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {name} —á–µ—Ä–µ–∑ –ø—ñ–¥–æ–∑—Ä—ñ–ª–µ —ñ–º‚Äô—è")
            except Exception as e:
                print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ {name}: {e}")

telegram_app.add_handler(ChatMemberHandler(handle_new_member, ChatMemberHandler.CHAT_MEMBER))

# Webhook —à–ª—è—Ö —ñ URL
WEBHOOK_PATH = f"/{TOKEN}"
WEBHOOK_URL = f"https://{HOSTNAME}{WEBHOOK_PATH}"

# Render health-check
@app.route("/", methods=["GET"])
def index():
    return "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!"

# –û—Å–Ω–æ–≤–Ω–∏–π webhook
@app.route(WEBHOOK_PATH, methods=["POST"])
def webhook():
    try:
        update = Update.de_json(request.get_json(force=True), telegram_app.bot)
        asyncio.run(telegram_app.initialize())  # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î Application
        asyncio.run(telegram_app.process_update(update))
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ webhook: {e}")
        return "ERROR", 500
    return "OK", 200

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
if __name__ == "__main__":
    import threading

    async def set_webhook():
        await telegram_app.bot.set_webhook(url=WEBHOOK_URL)
        print(f"‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞ –∞–¥—Ä–µ—Å–æ—é: {WEBHOOK_URL}")

    threading.Thread(target=lambda: asyncio.run(set_webhook())).start()
    app.run(host="0.0.0.0", port=PORT)
